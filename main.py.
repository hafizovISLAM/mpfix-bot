import os
import json
import httpx
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from bot import dp, bot
from aiogram import types
from datetime import datetime

load_dotenv()

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_CLIENT_ID = os.getenv("YANDEX_CLIENT_ID")
YANDEX_CLIENT_SECRET = os.getenv("YANDEX_CLIENT_SECRET")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "https://mp-fix.ru/webhook/–≤–∞—à_—Ç–æ–∫–µ–Ω"
TOKEN_FILE = "tokens.json"

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI ‚Äî‚Äî‚Äî‚Äî‚Äî
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –≤ Telegram
    async with httpx.AsyncClient() as client:
        await client.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
            json={"url": WEBHOOK_URL}
        )

@app.post("/webhook")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = types.Update.to_object(body)
    await dp.process_update(update)
    return {"ok": True}

@app.get("/oauth/callback")
async def oauth_callback(request: Request):
    params = dict(request.query_params)
    chat_id = params.get("state")
    code = params.get("code")
    if not chat_id or not code:
        return {"error": "Missing code or state"}

    # –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            "https://oauth.yandex.ru/token",
            data={
                "grant_type": "authorization_code",
                "code": code,
                "client_id": YANDEX_CLIENT_ID,
                "client_secret": YANDEX_CLIENT_SECRET
            }
        )
        data = resp.json()
        if "access_token" in data:
            token = data["access_token"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            tokens = {}
            if os.path.exists(TOKEN_FILE):
                with open(TOKEN_FILE, "r") as f:
                    tokens = json.load(f)
            tokens[chat_id] = {
                "access_token": token,
                "created_at": str(datetime.utcnow())
            }
            with open(TOKEN_FILE, "w") as f:
                json.dump(tokens, f, indent=2)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞
            await bot.send_message(
                int(chat_id),
                "‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å—É –ø–æ–ª—É—á–µ–Ω! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
                "üì¶ –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
                "1. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞\n"
                "2. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n"
                "3. –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "4. –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"
            )
            return {"status": "ok"}
        else:
            await bot.send_message(int(chat_id), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
            return {"error": data}

@app.get("/")
async def root():
    return {"status": "running"}

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn ‚Äî‚Äî‚Äî‚Äî‚Äî
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
